Day7

What is Terraform?
========================================
	Coding for Infra
	ONE Lang for All the Infra Tools
	Dev By - Hashicorp
		- Vagrant
		- terraform
		- packer
		- Consul
		- nomad
		- Vault
	Written in Golang
	Release
		Terraform		- CMD - FREE - OpenSource
		Terraform Enterprise	- GUI - Paid - Prop
	Version 
		1.0.10
========================================

What are the tools we have in infra?
===================================
AWS
Azure
GC
Vmware
GITHUB
Azure DevOps
Bitbucket
Mysql
MSSql
Apache
Ngnix
Tomcat
IIS
Queqe
LoadBalancers
Network Tools
Docker
Kubernetes
Datadog
NewRelic
Splunk
Nagios
Prom



How Terraform works?
=========================================

1 API = ONE FEATURE

Azure -------------> API Server ----> 500 Features Aka Resources or API
----------------------------------------------------------------------
CRUD
	PROGRAMING	CALLING
	CREATE 		GET
	READ		PUT
	UPDATE		POST
	DELETE		DELETE


Step 1 - Install Terraform
------------------------------------------
- https://www.terraform.io/downloads.html
- Extract it
- Set a installer in the path	| set PATH=%PATH%;C:\tools\hashicorp\terraform
- $ terraform version



Step 2 - Install Providers
https://www.terraform.io/docs/language/providers/index.html
https://registry.terraform.io/browse/providers

Manually 
Coding 
	- Write a .tf code for downloading provider
	- $ terraform init
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs

---------------------------------
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "=2.46.0"
    }
	github = {
      source  = "integrations/github"
      version = "~> 4.0"
    }
	azuredevops = {
      source = "microsoft/azuredevops"
      version = ">=0.1.0"
    }
  }
}

# Configure the Microsoft Azure Provider
provider "azurerm" {
  features {}
}

provider "azuredevops" {
	org_service_url = "https://dev.azure.com/holidaylandmark"
	personal_access_token = ""
}


# Configure the GitHub Provider
provider "github" {
	token = ""
}


---------------------------------

Step 3  - Write a Code
	------------------------
	Contains What Resources you want to work it?

	Resources	Options Aka Attributes
	------------------------------------
	VM
			Subscription
			Resource Group
			Image
			CPU+RAM
			NET
			ETC

	----------------------.tf--------------------------
	Resources
		Resource1
			Arguments1
			Arguments2
			Arguments3
			Attribute1
			Attribute2
			Attribute3
			Attribute4
		Resource2
			Arguments1
			Arguments2
			Arguments3
			Attribute1
			Attribute2
			Attribute3
			Attribute4
		Resource3
			Arguments1
			Arguments2
			Arguments3
			Attribute1
			Attribute2
			Attribute3
			Attribute4
	=====================================================
	GET  - PUT - POST - DELETE
	=====================================================
Step 4 - 
terrafo	PLAN 	- APPLY   - DELETE
	-----------------------------------------------------
	DRY RUN | CREATE or Update | delete


Azure			Github			Azure DevOps
=====================================================================
VM			create a Repo		Create a repo
---------------------------------------------------------------------
Create 
Update
delete


https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs
https://registry.terraform.io/providers/integrations/github/latest/docs
https://registry.terraform.io/providers/microsoft/azuredevops/latest/docs

https://www.terraform.io/docs/language/meta-arguments/depends_on.html

resource "azurerm_resource_group" "example" {
  name     = "example-resources"
  location = "West Europe"
}

resource "azurerm_virtual_network" "example" {
  name                = "example-network"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
}

resource "azurerm_subnet" "example" {
  name                 = "internal"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_network_interface" "example" {
  name                = "example-nic"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example.id
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_linux_virtual_machine" "example" {
  name                = "example-machine"
  resource_group_name = azurerm_resource_group.example.name
  location            = azurerm_resource_group.example.location
  size                = "Standard_F2"
  admin_username      = "adminuser"
  network_interface_ids = [
    azurerm_network_interface.example.id,
  ]

  admin_ssh_key {
    username   = "adminuser"
    public_key = file("~/.ssh/id_rsa.pub")
  }

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "Canonical"
    offer     = "UbuntuServer"
    sku       = "16.04-LTS"
    version   = "latest"
  }
}

===========================================================
How Providers Authenticate with API?
------------------------------------------------------
Azure 
https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs#authenticating-to-azure

AWS

Github
https://registry.terraform.io/providers/integrations/github/latest/docs#authentication
-
Azure devOps
https://registry.terraform.io/providers/microsoft/azuredevops/latest/docs
--------------
resource "azuredevops_project" "azurerepo" {
  name               = "rajesh-repo"
  visibility         = "private"
  version_control    = "Git"
  work_item_template = "Agile"
}
-----------------
resource "github_repository" "github-example" {
  name        = "example"
  description = "My awesome codebase"

  visibility = "public"
}


-----------------------------------
IDEOMPOTENT
-----------------------------------

	DESIRE		VS 	ACTUAL		ACTION
	--------------------------------
1 	5 RESC				0	5
2	1 CHANGE		4 + 1		1	
3	6 = 5+1			5		1

2	2			1		1



What is State file in terraform?
-----------------------------------
JSON file
Contains Response of APPLY | DELETE 
- file name - terraform.tfstate - MOST Recent
- file name - terraform.tfstate.backup - Second Last RUN


---------
Assignment #1
- Write a tf script to authentication github and azuredevops
- Write a tf script to create a repo
- work with PLAN - Apply - Destroy
- Understand more state file.






Day8

.tf
-----------
providers

resoureces
	arguments
	attributes
	meta
	provioioners


==============================
How to secure Secrets?
- It should  not be .tf as part of the project.
- It can be part of env var
- It can be part of some-hiddens out of project
- Hasicorp vault

terraform Basic Flow - https://www.devopsschool.com/blog/terraform-basics-workflow-loop-explained/
terraform Advance flow - https://www.devopsschool.com/blog/terraform-advance-workflow-loop-explained/




Day9
number - https://www.devopsschool.com/blog/terraform-variable-number-type-explained/
string - https://www.devopsschool.com/blog/terraform-variable-string-type-explained-2/
list - https://www.devopsschool.com/blog/terraform-variable-list-type-explained/
map - https://www.devopsschool.com/blog/terraform-variable-map-type-explained/
bool - https://www.devopsschool.com/blog/terraform-variable-boolean-type-explained/
--------------
https://www.devopsschool.com/blog/terraform-environment-variables-exaplained/
https://www.devopsschool.com/blog/terraform-variable-using-tf_var-environment-variables-example/
https://www.devopsschool.com/blog/example-of-terraform-terraform-tfvars/



set TF_VAR_numofusers=3
set TF_VAR_reponame=ramukaka
terraform apply -var "create_vm=true"


How to create and attach disk to VMS in Azure?
----------------------------------
Step 1 - Create a Volume - azurerm_managed_disk
Step 2 - Attach a disk to VMS - azurerm_virtual_machine_data_disk_attachment
Step 3 - Use remote-exec provisoners
Run following commands - https://docs.microsoft.com/en-us/azure/virtual-machines/linux/attach-disk-portal








Day10
https://www.devopsschool.com/blog/terraform-workspace-explained/

 500  terraform workspace
  501  terraform workspace list
  502  terraform workspace select default
  503  clear
  504  terraform workspace list
  505  terraform workspace new qa
  506  cls
  507  clear
  508  terraform workspace list
  509  terraform plan
  510  terraform workspace default
  511  terraform workspace select default
  512  terraform plan
  513  terraform workspace select prod
  514  terraform plan
  515  terraform workspace select qa
  516  terraform apply
  517  terraform plan
  518  clear
  519  terraform workspace


https://www.terraform.io/docs/language/functions/index.html#

www.rajeshkumar.xyz
rajesh@devopsschool.com
